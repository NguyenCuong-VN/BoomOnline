package src.view;

import java.util.Map;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import src.api.ClientAPI;
import src.model.NguoiChoi;
import src.socket.ClientSocket;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 26th June
 */
public class HomePage extends javax.swing.JFrame {
    
    private DefaultTableModel tmNC;
    private ClientSocket socket = null;
    private boolean themNC;

    /**
     * Creates new form HomePage
     */
    public HomePage(ClientSocket socket) {
    	this.socket = socket;
        initComponents();
        themNC = false;
    }

    // "users":[{"id":13, "name":"abcde", "point":0, "status":"online"}]
    public void setTable(Object[][] dataMo){ 	    	
    	
    	jTable1.setModel(new javax.swing.table.DefaultTableModel(
    			dataMo,
                new String [] {
                    "ID", "Name", "Điểm", "Status"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
     });
        
    }
    
    private int getMa(){
    return 0+tmNC.getRowCount(); 
    }
    
    private NguoiChoi getNCByMa(int ID){
        for (int i=0; i<tmNC.getRowCount(); i++){
            if(Integer.parseInt(tmNC.getValueAt(i, 0).toString())== ID){
                return new NguoiChoi(ID,
                        tmNC.getValueAt(i, 1).toString(),
                        tmNC.getValueAt(i, 2).toString(),
                        tmNC.getValueAt(i, 3).toString());
            }
        }
        return null;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        
        jButton1.enable(false);
        jButton3.enable(false);
        jButton5.enable(false);
        

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Danh sách người chơi online");
        

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                
            },
            new String [] {
                "ID", "Name", "Điểm", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);



        jButton2.setText("Thách đấu");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        
        jButton3.setText("Tổng điểm");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        
        jButton1.setText("Trung bình điểm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
        jButton5.setText("Trung bình thời gian");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        
        


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(427, 427, 427)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jButton2)
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                            	.addComponent(jButton5)
                                .addGap(68, 68, 68)
                                .addComponent(jButton3)
                                .addGap(98, 98, 98)
                                .addComponent(jButton1)
                               )
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    )
                                .addGap(64, 64, 64)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)

                                    ))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(172, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            
                            )
                        .addGap(35, 35, 35)
                        )
                    )
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    
                    )
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                   
                   )
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                	.addComponent(jButton1)
                    .addComponent(jButton5)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                  )
                .addGap(63, 63, 63))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
    	if(jTable1.getSelectedRow() != -1){
    		Object tmp = jTable1.getValueAt(jTable1.getSelectedRow(), 0);
    		if(tmp instanceof Long){
    			int idCompettor =  Math.toIntExact((Long) tmp);
    			this.socket.compare(idCompettor);
    		}
    		
    	}
    	else JOptionPane.showMessageDialog(this, "Hãy click chọn đối thủ trước");
    	
        
       
    }//GEN-LAST:event_jButton2ActionPerformed
    
    //tong diem
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
    	this.getRanks(ClientAPI.getRanks("totalpoint"), "totalpoint");
    	
        
       
    }//GEN-LAST:event_jButton2ActionPerformed
    
  //trung binh diem
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
    	this.getRanks(ClientAPI.getRanks("averagepoint"), "averagepoint");
    	
        
       
    }//GEN-LAST:event_jButton2ActionPerformed
    
  //trung binh thoi gian
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
    	this.getRanks(ClientAPI.getRanks("averagetime"), "averagetime");
    	
        
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void getRanks(JSONObject data, String nameRank){					
    	Map<String, String> datas = (Map<String, String>) data.get("data");
		//create object[][] data user online
		Object[][] dataMo = new Object [datas.size()+1][4];
		
    	if(nameRank.equals("averagepoint")){
    		for (Map.Entry<String,String> entry : datas.entrySet()) {
    			int index = Integer.parseInt(entry.getKey());
    				JSONObject a;
    				try {
    					a = (JSONObject) new JSONParser().parse(entry.getValue());
    					Object[] tmp = new Object[4];
    					tmp[0] = index ;
    					tmp[1] = a.get("id");
    					tmp[2] = a.get("name");
    					tmp[3] = a.get("average");
    					dataMo[index] = tmp; 
    				} catch (ParseException e) {
    					e.printStackTrace();
    				}				
        	}
    		try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
    		 RankPage rank = new RankPage();
 		    rank.setVisible(true);
 		    rank.setLocationRelativeTo(null);
 		    rank.setTitle("rank");
 		    rank.setTable(dataMo, "Trung bình điểm");
 		   rank.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    	}
    	if(nameRank.equals("averagetime")){
    		for (Map.Entry<String,String> entry : datas.entrySet()) {
    			int index = Integer.parseInt(entry.getKey());
    				JSONObject a;
    				try {
    					a = (JSONObject) new JSONParser().parse(entry.getValue());
    					Object[] tmp = new Object[4];
    					tmp[0] = index ;
    					tmp[1] = a.get("id");
    					tmp[2] = a.get("name");
    					tmp[3] = a.get("average");
    					dataMo[index] = tmp; 
    				} catch (ParseException e) {
    					e.printStackTrace();
    				}				
        	}
    		try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
    		 RankPage rank = new RankPage();
 		    rank.setVisible(true);
 		    rank.setLocationRelativeTo(null);
 		    rank.setTitle("rank");
 		    rank.setTable(dataMo, "Trung bình thời gian");
 		   rank.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    	}
    	else{   		
    		for (Map.Entry<String,String> entry : datas.entrySet()) {
    			int index = Integer.parseInt(entry.getKey());
    				JSONObject a;
    				try {
    					a = (JSONObject) new JSONParser().parse(entry.getValue());
    					Object[] tmp = new Object[4];
    					tmp[0] = index ;
    					tmp[1] = a.get("id");
    					tmp[2] = a.get("name");
    					tmp[3] = a.get("point");
    					dataMo[index] = tmp; 
    				} catch (ParseException e) {
    					e.printStackTrace();
    				}				
        	}
    		try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(RankPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
    		
    		
		    RankPage rank = new RankPage();
		    rank.setVisible(true);
		    rank.setLocationRelativeTo(null);
		    rank.setTitle("rank");
		    rank.setTable(dataMo, "Tổng điểm");
		    rank.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    	}
		
		
		 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables

    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;


    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    public static void main(String[] args) {
		HomePage d = new HomePage(new ClientSocket());
		d.setVisible(true);
		
	}
}
